import java.util.*;

public class TreeMapExample {
    public static void main(String[] args) {
        // TreeMap 생성 및 데이터 추가
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "Value1");
        treeMap.put(2, "Value2");
        treeMap.put(3, "Value3");
        treeMap.put(4, "Value4");
        treeMap.put(5, "Value5");
        treeMap.put(6, "Value6");
        treeMap.put(7, "Value7");
        treeMap.put(8, "Value8");
        treeMap.put(9, "Value9");
        treeMap.put(10, "Value10");

        // 뒤에서 3번째에서 5번째까지 범위 구하기
        int startFromEnd = 3; // 뒤에서 몇 번째 시작
        int endFromEnd = 5;   // 뒤에서 몇 번째 끝

        SortedMap<Integer, String> subMap = getRangeFromEnd(treeMap, startFromEnd, endFromEnd);

        System.out.println("뒤에서 " + startFromEnd + "번째에서 " + endFromEnd + "번째까지 범위: " + subMap);

        // TreeMap에서 해당 범위의 요소 제거
        for (Integer key : subMap.keySet()) {
            treeMap.remove(key);
        }

        // 결과 확인
        System.out.println("수정된 TreeMap: " + treeMap);
    }

    // TreeMap에서 뒤에서 N번째에서 M번째까지 범위 가져오기
    public static SortedMap<Integer, String> getRangeFromEnd(TreeMap<Integer, String> treeMap, int startFromEnd, int endFromEnd) {
        if (startFromEnd <= 0 || endFromEnd <= 0 || startFromEnd > treeMap.size() || endFromEnd > treeMap.size() || startFromEnd < endFromEnd) {
            throw new IllegalArgumentException("유효하지 않은 범위입니다.");
        }

        // 내림차순 순회
        NavigableSet<Integer> descendingKeys = treeMap.descendingKeySet();
        List<Integer> keysList = new ArrayList<>(descendingKeys);

        // 뒤에서 N번째부터 M번째까지 키 추출
        int startIndex = startFromEnd - 1; // 0-based index
        int endIndex = endFromEnd - 1;

        SortedMap<Integer, String> subMap = new TreeMap<>();
        for (int i = startIndex; i >= endIndex; i--) {
            Integer key = keysList.get(i);
            subMap.put(key, treeMap.get(key));
        }

        return subMap;
    }
}
