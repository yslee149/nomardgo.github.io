package org.yslee.history;

import java.util.LinkedHashMap;
import java.util.Map;

class Item {
    int id;
    String name;

    public Item(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Item{id=" + id + ", name='" + name + "'}";
    }
}

public class HistoryTest {

    public static void main(String[] args) {
        Map<Integer, Item> historyMap = new LinkedHashMap<>();

        int key = 0;
        historyMap.put(key++, new Item(0, "name-0"));
        historyMap.put(key++, new Item(1, "name-1"));
        historyMap.put(key++, new Item(2, "name-2"));
        historyMap.put(key++, new Item(3, "name-3"));
        historyMap.put(key++, new Item(4, "name-4"));

        // Start from the last element
//        int currentKey = historyMap.size() - 1;
        int currentKey = historyMap.size() ;

        // Undo operation
        currentKey = undo(historyMap, currentKey);  // Move to previous state
        currentKey = undo(historyMap, currentKey);  // Move to previous state

        // Redo operation
        currentKey = redo(historyMap, currentKey);  // Move to next state
    }

    public static int undo(Map<Integer, Item> historyMap, int currentKey) {
        if (currentKey > 0) {
            currentKey--;  // Move one step back
            System.out.println("Undo: " + historyMap.get(currentKey));
        } else {
            System.out.println("No more undo steps available.");
        }
        return currentKey;
    }

    public static int redo(Map<Integer, Item> historyMap, int currentKey) {
        if (currentKey < historyMap.size() - 1) {
            currentKey++;  // Move one step forward
            System.out.println("Redo: " + historyMap.get(currentKey));
        } else {
            System.out.println("No more redo steps available.");
        }
        return currentKey;
    }
}

////////////


import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

class Item {
    int id;
    String name;

    public Item(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Item{id=" + id + ", name='" + name + "'}";
    }
}

public class HistoryTest {

    public static void main(String[] args) {
        Map<Integer, Item> historyMap = new LinkedHashMap<>();

        // 순차적이지 않은 키로 데이터 추가
        historyMap.put(10, new Item(10, "name-10"));
        historyMap.put(5, new Item(5, "name-5"));
        historyMap.put(20, new Item(20, "name-20"));
        historyMap.put(15, new Item(15, "name-15"));
        historyMap.put(25, new Item(25, "name-25"));

        // 키 목록 저장 및 초기 위치 설정
        List<Integer> keyList = new ArrayList<>(historyMap.keySet());
        int currentIndex = keyList.size() - 1; // 맨 마지막 요소로 시작

        // Undo/Redo 동작 테스트
        currentIndex = undo(historyMap, keyList, currentIndex);  // 이전 상태로 이동
        currentIndex = undo(historyMap, keyList, currentIndex);  // 이전 상태로 이동
        currentIndex = redo(historyMap, keyList, currentIndex);  // 다음 상태로 이동
    }

    public static int undo(Map<Integer, Item> historyMap, List<Integer> keyList, int currentIndex) {
        if (currentIndex > 0) {
            currentIndex--;  // 이전 상태로 이동
            System.out.println("Undo: " + historyMap.get(keyList.get(currentIndex)));
        } else {
            System.out.println("No more undo steps available.");
        }
        return currentIndex;
    }

    public static int redo(Map<Integer, Item> historyMap, List<Integer> keyList, int currentIndex) {
        if (currentIndex < keyList.size() - 1) {
            currentIndex++;  // 다음 상태로 이동
            System.out.println("Redo: " + historyMap.get(keyList.get(currentIndex)));
        } else {
            System.out.println("No more redo steps available.");
        }
        return currentIndex;
    }
}
