

tree.addTreeListener(new TreeListener() {
    @Override
    public void treeExpanded(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        // 펼쳐질 때 컬럼 텍스트 변경
        item.setText(0, "Expanded: " + item.getText(0));
    }

    @Override
    public void treeCollapsed(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        // 닫힐 때 컬럼 텍스트 변경
        item.setText(0, "Collapsed: " + item.getText(0));
    }
});



treeViewer.getTree().addTreeListener(new TreeListener() {
    @Override
    public void treeExpanded(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        item.setText(0, "Expanded: " + item.getText(0));
    }

    @Override
    public void treeCollapsed(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        item.setText(0, "Collapsed: " + item.getText(0));
    }
});



treeViewer.setLabelProvider(new ColumnLabelProvider() {
    @Override
    public String getText(Object element) {
        // 데이터 모델 상태에 따라 컬럼 텍스트 반환
        MyModel model = (MyModel) element;
        return model.isExpanded() ? "Expanded: " + model.getName() : "Collapsed: " + model.getName();
    }
});



treeViewer.getTree().addTreeListener(new TreeListener() {
    @Override
    public void treeExpanded(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        MyModel model = (MyModel) item.getData();
        model.setExpanded(true);
        treeViewer.update(model, null); // UI 업데이트
    }

    @Override
    public void treeCollapsed(TreeEvent e) {
        TreeItem item = (TreeItem) e.item;
        MyModel model = (MyModel) item.getData();
        model.setExpanded(false);
        treeViewer.update(model, null); // UI 업데이트
    }
});


-- 유니코드 

1. 열린폴더 : U+1F4C2
2. 닫힌폴더 : U+1F4C1

3. 닫힌상태 :  U+25B6
4. 열린상태 : U+25BC


📂 U+1F4C2: 열려 있는 폴더
📁 U+1F4C1: 닫힌 폴더

트리 노드에서 흔히 사용되는 확장/축소 상태 기호:

▶ U+25B6: 오른쪽 화살표 (닫힌 상태)
▼ U+25BC: 아래쪽 화살표 (열린 상태)
▲ U+25B2: 위쪽 화살표
► U+25BA: 오른쪽 화살표 (다른 스타일)
◀ U+25C0: 왼쪽 화살표

오름 차순 
🔼 U+1F53C: 위쪽 작은 삼각형
▲ U+25B2: 위쪽 큰 삼각형
⬆ U+2B06: 위쪽 화살표
⇧ U+21E7: 위쪽 굵은 화살표

내림 차순 

🔽 U+1F53D: 아래쪽 작은 삼각형
▼ U+25BC: 아래쪽 큰 삼각형
⬇ U+2B07: 아래쪽 화살표
⇩ U+21E9: 아래쪽 굵은 화살표



🔼 A-Z (오름차순)
🔽 Z-A (내림차순)


treeViewer.setLabelProvider(new ColumnLabelProvider() {
    @Override
    public String getText(Object element) {
        MyModel model = (MyModel) element;
        return model.getName();
    }

    @Override
    public Image getImage(Object element) {
        if (isAscending) {
            return new Image(display, "ascending_icon.png"); // 오름차순 이미지
        } else {
            return new Image(display, "descending_icon.png"); // 내림차순 이미지
        }
    }
});


--


treeViewer.setLabelProvider(new CellLabelProvider() {
    @Override
    public void update(ViewerCell cell) {
        Object element = cell.getElement(); // 데이터 모델 객체
        TreeViewer viewer = (TreeViewer) cell.getViewer();

        // TreeViewer에서 해당 객체의 확장 상태 확인
        boolean isExpanded = viewer.getExpandedState(element);

        // 확장 상태에 따라 텍스트 설정
        if (isExpanded) {
            cell.setText("📂 " + element.toString()); // 확장된 상태
        } else {
            cell.setText("📁 " + element.toString()); // 닫힌 상태
        }
    }
});



treeViewer.setLabelProvider(new CellLabelProvider() {
    @Override
    public void update(ViewerCell cell) {
        Object element = cell.getElement();
        Tree tree = treeViewer.getTree();

        // TreeItem 직접 찾기
        for (TreeItem item : tree.getItems()) {
            if (item.getData().equals(element)) {
                boolean isExpanded = item.getExpanded();
                cell.setText((isExpanded ? "📂 " : "📁 ") + element.toString());
                break;
            }
        }
    }
});


Map<Object, Boolean> expandedStateCache = new HashMap<>();

treeViewer.addTreeListener(new TreeViewerListener() {
    @Override
    public void treeExpanded(TreeExpansionEvent event) {
        expandedStateCache.put(event.getElement(), true);
    }

    @Override
    public void treeCollapsed(TreeExpansionEvent event) {
        expandedStateCache.put(event.getElement(), false);
    }
});

// update()에서 캐시 사용
treeViewer.setLabelProvider(new CellLabelProvider() {
    @Override
    public void update(ViewerCell cell) {
        Object element = cell.getElement();
        boolean isExpanded = expandedStateCache.getOrDefault(element, false);
        cell.setText((isExpanded ? "📂 " : "📁 ") + element.toString());
    }
});


------------


public void expandToDepth(TreeViewer viewer, Object element, int currentDepth, int targetDepth) {
    if (currentDepth >= targetDepth) {
        return;
    }

    // 현재 요소를 확장
    viewer.setExpandedState(element, true);

    // 자식 요소 순회
    ITreeContentProvider contentProvider = (ITreeContentProvider) viewer.getContentProvider();
    Object[] children = contentProvider.getChildren(element);

    for (Object child : children) {
        expandToDepth(viewer, child, currentDepth + 1, targetDepth);
    }
}


int targetDepth = 2; // 목표 깊이
Object rootElement = treeViewer.getInput();
expandToDepth(treeViewer, rootElement, 0, targetDepth);


-----------


import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

public class TreeFocusExample {
    public static void main(String[] args) {
        Display display = new Display();
        Shell shell = new Shell(display);
        shell.setSize(400, 300);
        shell.setText("Tree Focus Example");

        // Tree 생성
        Tree tree = new Tree(shell, SWT.BORDER);
        tree.setBounds(10, 10, 360, 240);

        // TreeItem 생성
        TreeItem root = new TreeItem(tree, SWT.NONE);
        root.setText("Root");
        for (int i = 1; i <= 10; i++) {
            TreeItem child = new TreeItem(root, SWT.NONE);
            child.setText("Child " + i);
        }
        root.setExpanded(true); // Root를 확장하여 자식 항목 표시

        // 특정 TreeItem으로 포커스 이동
        Display.getDefault().timerExec(2000, () -> {
            TreeItem targetItem = root.getItem(5); // "Child 6" 선택
            if (targetItem != null) {
                tree.setSelection(new TreeItem[] { targetItem }); // 항목 선택
                tree.showItem(targetItem); // 스크롤로 해당 항목 표시
                System.out.println("Focused on: " + targetItem.getText());
            }
        });

        shell.open();
        while (!shell.isDisposed()) {
            if (!display.readAndDispatch()) {
                display.sleep();
            }
        }
        display.dispose();
    }
}


--

treeViewer.setSelection(new StructuredSelection(yourTargetObject), true);

--


import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.events.ShellAdapter;
import org.eclipse.swt.events.ShellEvent;

public class ShellCloseExample {
    public static void main(String[] args) {
        // Display 및 Shell 생성
        Display display = new Display();
        Shell shell = new Shell(display);
        shell.setText("Shell Close Example");
        shell.setSize(300, 200);

        // ShellListener 추가
        shell.addShellListener(new ShellAdapter() {
            @Override
            public void shellClosed(ShellEvent e) {
                // 사용자 창 닫기 이벤트 처리
                System.out.println("X 버튼이 눌렸습니다.");

                // 창 닫기 중단 (필요시)
                boolean allowClose = askUserForConfirmation();
                if (!allowClose) {
                    e.doit = false; // 창 닫기 취소
                }
            }
        });

        // Shell 열기
        shell.open();
        while (!shell.isDisposed()) {
            if (!display.readAndDispatch()) {
                display.sleep();
            }
        }
        display.dispose();
    }

    // 사용자 확인을 위한 메서드
    private static boolean askUserForConfirmation() {
        // 실제 구현에서는 Dialog를 사용하여 사용자에게 확인 요청 가능
        System.out.println("창을 닫으시겠습니까? (기본적으로 true)");
        return true; // 기본적으로 닫기 허용
    }
}


