import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TreeViewer;

import java.util.Map;

public class TreeViewerExpander {

    private final TreeViewer treeViewer;
    private final Map<Integer, SampleCls> dataMap;
    private boolean fileFound = false;

    // 생성자에서 TreeViewer와 데이터 맵을 받아 설정
    public TreeViewerExpander(TreeViewer treeViewer, Map<Integer, SampleCls> dataMap) {
        this.treeViewer = treeViewer;
        this.dataMap = dataMap;
    }

    /**
     * `isFile`이 `true`인 노드를 찾고, 해당 노드만 확장하며 나머지 노드는 닫는 메서드.
     */
    public void expandFirstFileNode(int maxDepth) {
        Object root = treeViewer.getInput();
        if (root != null) {
            expandOrCollapseNode(root, 0, maxDepth);
        }
    }

    // 노드를 순회하면서 조건에 따라 열거나 닫기
    private void expandOrCollapseNode(Object node, int currentDepth, int maxDepth) {
        if (currentDepth > maxDepth || fileFound) {
            return;
        }

        ITreeContentProvider provider = (ITreeContentProvider) treeViewer.getContentProvider();
        SampleCls sample = (SampleCls) node;

        boolean shouldExpand = !fileFound && sample.isFile();

        if (shouldExpand) {
            treeViewer.setExpandedState(node, true);
            fileFound = true;
        } else {
            treeViewer.setExpandedState(node, false);
        }

        // 자식 노드에 대해서도 재귀적으로 처리
        Object[] children = provider.getChildren(node);
        if (children != null && !fileFound && currentDepth < maxDepth) {
            for (Object child : children) {
                expandOrCollapseNode(child, currentDepth + 1, maxDepth);
            }
        }
    }
}
