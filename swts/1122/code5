Tree tree = treeViewer.getTree();

// 사용자 지정 색상 설정
final Color customSelectionBackground = new Color(display, 200, 200, 255); // 예: 연한 파란색
final Color customSelectionForeground = new Color(display, 0, 0, 0);       // 검은색

// 기본 선택 색상 지우기
tree.addListener(SWT.EraseItem, new Listener() {
    @Override
    public void handleEvent(Event event) {
        event.detail &= ~SWT.SELECTED;
    }
});

// 아이템 그리기
tree.addListener(SWT.PaintItem, new Listener() {
    @Override
    public void handleEvent(Event event) {
        TreeItem item = (TreeItem) event.item;
        GC gc = event.gc;
        Rectangle bounds = event.getBounds();

        // 선택 여부 확인
        boolean isSelected = (tree.getSelectionIndex() == tree.indexOf(item));

        if (isSelected) {
            gc.setBackground(customSelectionBackground);
            gc.setForeground(customSelectionForeground);
        } else {
            gc.setBackground(tree.getBackground());
            gc.setForeground(tree.getForeground());
        }

        // 배경 그리기
        gc.fillRectangle(bounds);

        // 텍스트 그리기
        String text = item.getText(event.index);
        Point textSize = gc.textExtent(text);
        int textY = bounds.y + (bounds.height - textSize.y) / 2;
        gc.drawText(text, bounds.x + 2, textY, true);

        // 아이콘이 있는 경우 그리기
        Image image = item.getImage(event.index);
        if (image != null) {
            Rectangle imageBounds = image.getBounds();
            int imageY = bounds.y + (bounds.height - imageBounds.height) / 2;
            gc.drawImage(image, bounds.x + 2, imageY);
        }

        // 기본 그리기 취소
        event.detail &= ~SWT.FOREGROUND;
    }
});

// Tree가 dispose될 때 색상 리소스 해제
tree.addListener(SWT.Dispose, new Listener() {
    @Override
    public void handleEvent(Event event) {
        customSelectionBackground.dispose();
        customSelectionForeground.dispose();
    }
});
