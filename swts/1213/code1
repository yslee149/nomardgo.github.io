import java.io.File;

public class EclipseIniPath {
    public static void main(String[] args) {
        String eclipseHome = System.getProperty("osgi.install.area");
        if (eclipseHome != null) {
            File iniFile = new File(eclipseHome.replace("file:", ""), "eclipse.ini");
            System.out.println("Eclipse.ini Path: " + iniFile.getAbsolutePath());
        } else {
            System.out.println("Eclipse installation directory not found!");
        }
    }
}

----------

plugin/resources/config.propertie

config.properties

app.name=MyPlugin
app.version=1.0.0
enable.feature=true


3. 설정 파일 읽기
Java의 Properties 클래스를 사용해 설정 파일을 쉽게 읽어올 수 있습니다.

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class ConfigReader {
    private Properties properties = new Properties();

    public ConfigReader(String filePath) throws IOException {
        try (FileInputStream inputStream = new FileInputStream(filePath)) {
            properties.load(inputStream);
        }
    }

    public String getValue(String key, String defaultValue) {
        return properties.getProperty(key, defaultValue);
    }

    public static void main(String[] args) {
        try {
            // 설정 파일 경로 (플러그인 내부에 위치한 경우)
            String configFilePath = "path/to/config.properties";

            ConfigReader configReader = new ConfigReader(configFilePath);
            String appName = configReader.getValue("app.name", "DefaultApp");
            String appVersion = configReader.getValue("app.version", "0.0.0");

            System.out.println("App Name: " + appName);
            System.out.println("App Version: " + appVersion);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


--


import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

public class PluginConfigReader {
    private Properties properties = new Properties();

    public PluginConfigReader(String fileName) throws IOException {
        // 현재 플러그인의 번들 가져오기
        Bundle bundle = Platform.getBundle("com.example.myplugin");
        
        // 리소스 경로에서 파일 읽기
        try (InputStream input = bundle.getEntry(fileName).openStream()) {
            properties.load(input);
        }
    }

    public String getValue(String key, String defaultValue) {
        return properties.getProperty(key, defaultValue);
    }

    public static void main(String[] args) {
        try {
            PluginConfigReader configReader = new PluginConfigReader("resources/config.properties");
            String appName = configReader.getValue("app.name", "DefaultApp");
            System.out.println("App Name: " + appName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
--


import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

public class Activator extends AbstractUIPlugin {
    private static Activator instance;

    @Override
    public void start(BundleContext context) throws Exception {
        super.start(context);
        instance = this;

        // 설정 파일 읽기 로직
        try {
            PluginConfigReader configReader = new PluginConfigReader("resources/config.properties");
            String appName = configReader.getValue("app.name", "DefaultApp");
            System.out.println("App Name: " + appName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop(BundleContext context) throws Exception {
        instance = null;
        super.stop(context);
    }

    public static Activator getDefault() {
        return instance;
    }
}


--

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

public class Activator implements BundleActivator {
    @Override
    public void start(BundleContext context) throws Exception {
        // 런타임에 시스템 속성 추가
        System.setProperty("my.custom.property", "myValue");
        System.out.println("Custom property added to the runtime.");
    }

    @Override
    public void stop(BundleContext context) throws Exception {
        // 종료 시 필요 시 정리 작업
    }
}


String customProperty = context.getProperty("my.custom.property");
System.out.println("Custom Property from BundleContext: " + customProperty);


--

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Properties;

public class Activator implements BundleActivator {
    @Override
    public void start(BundleContext context) throws Exception {
        // config.ini 파일 경로 가져오기
        String configFilePath = System.getProperty("osgi.configuration.area") + "config.ini";

        // 키 값 정의
        String key = "my.custom.property";
        String defaultValue = "defaultValue";

        // config.ini에서 값을 읽고 없으면 추가
        String value = ensurePropertyInConfig(configFilePath, key, defaultValue);

        // 결과 출력
        System.out.println("Property Value: " + value);
    }

    @Override
    public void stop(BundleContext context) throws Exception {
        // 종료 시 정리 작업 (필요 시 구현)
    }

    /**
     * config.ini에서 키 값을 확인하고 없으면 생성
     *
     * @param configFilePath config.ini 파일 경로
     * @param key            확인할 키
     * @param defaultValue   키가 없을 때 추가할 기본 값
     * @return 최종 값
     */
    private String ensurePropertyInConfig(String configFilePath, String key, String defaultValue) {
        Properties properties = new Properties();

        try {
            // 파일이 존재하면 읽기
            File configFile = new File(configFilePath);
            if (configFile.exists()) {
                try (FileInputStream input = new FileInputStream(configFile)) {
                    properties.load(input);
                }
