Tree tree = treeViewer.getTree();

// 선택된 셀 정보를 저장하는 변수
final Point[] highlightedCell = {null}; // [columnIndex, rowIndex]

// 마우스 이동 이벤트
tree.addListener(SWT.MouseMove, event -> {
    Point point = new Point(event.x, event.y);
    TreeItem item = tree.getItem(point);

    if (item != null) {
        int columnCount = tree.getColumnCount();
        for (int i = 0; i < columnCount; i++) {
            Rectangle bounds = item.getBounds(i);
            if (bounds.contains(point)) {
                // 현재 셀의 컬럼과 행을 저장
                int rowIndex = tree.indexOf(item);
                highlightedCell[0] = new Point(i, rowIndex);
                tree.redraw(); // UI 갱신
                return;
            }
        }
    }

    // 마우스가 셀 밖으로 나가면 초기화
    if (highlightedCell[0] != null) {
        highlightedCell[0] = null;
        tree.redraw(); // UI 갱신
    }
});

// PaintItem 이벤트로 하이라이팅 효과 추가
tree.addListener(SWT.PaintItem, event -> {
    Point highlight = highlightedCell[0];

    if (highlight != null && highlight.x == event.index && tree.indexOf((TreeItem) event.item) == highlight.y) {
        // 하이라이팅 배경 설정
        event.gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
        event.gc.fillRectangle(event.getBounds());
    }

    // 기본 텍스트와 이미지 다시 그리기
    TreeItem item = (TreeItem) event.item;
    Image image = item.getImage(event.index);

    if (image != null) {
        Rectangle bounds = item.getBounds(event.index);
        int x = bounds.x + (bounds.width - image.getBounds().width) / 2;
        int y = bounds.y + (bounds.height - image.getBounds().height) / 2;
        event.gc.drawImage(image, x, y);
    }
});
