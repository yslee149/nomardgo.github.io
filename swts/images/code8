package com.test;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;

public class TreeViewerMouseColumnIndex {
    public static void main(String[] args) {
        Display display = new Display();
        Shell shell = new Shell(display);
        shell.setLayout(new GridLayout(1, false));
        shell.setText("TreeViewer Mouse Column Index");

        // TreeViewer 생성
        TreeViewer treeViewer = new TreeViewer(shell, SWT.BORDER | SWT.FULL_SELECTION);
        Tree tree = treeViewer.getTree();
        tree.setHeaderVisible(true);
        tree.setLinesVisible(true);
        tree.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

        // 컬럼 추가
        TreeViewerColumn column1 = new TreeViewerColumn(treeViewer, SWT.NONE);
        column1.getColumn().setText("Column 1");
        column1.getColumn().setWidth(100);

        TreeViewerColumn column2 = new TreeViewerColumn(treeViewer, SWT.NONE);
        column2.getColumn().setText("Column 2");
        column2.getColumn().setWidth(100);

        TreeViewerColumn column3 = new TreeViewerColumn(treeViewer, SWT.NONE);
        column3.getColumn().setText("Column 3");
        column3.getColumn().setWidth(100);

        // LabelProvider 설정
        column1.setLabelProvider(new ColumnLabelProvider() {
            @Override
            public String getText(Object element) {
                return element.toString() + " - Data 1";
            }
        });

        column2.setLabelProvider(new ColumnLabelProvider() {
            @Override
            public String getText(Object element) {
                return element.toString() + " - Data 2";
            }
        });

        column3.setLabelProvider(new ColumnLabelProvider() {
            @Override
            public String getText(Object element) {
                return element.toString() + " - Data 3";
            }
        });

        // ContentProvider 설정 - ITreeContentProvider 구현
        treeViewer.setContentProvider(new ITreeContentProvider() {
            @Override
            public Object[] getElements(Object inputElement) {
                // 루트 요소 반환
                return (Object[]) inputElement;
            }

            @Override
            public Object[] getChildren(Object parentElement) {
                // 자식 요소 없음
                return new Object[0];
            }

            @Override
            public Object getParent(Object element) {
                // 부모 요소 없음
                return null;
            }

            @Override
            public boolean hasChildren(Object element) {
                // 자식 요소 없음
                return false;
            }

            @Override
            public void dispose() {
                // 리소스 해제 필요 없음
            }

            @Override
            public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
                // 입력 변경 시 동작 없음
            }
        });

        // 입력 데이터 설정
        treeViewer.setInput(new Object[]{"Row 1", "Row 2", "Row 3"});

        // 마우스 이동 이벤트 추가
        tree.addMouseMoveListener(new MouseMoveListener() {
            @Override
            public void mouseMove(MouseEvent event) {
                Point point = new Point(event.x, event.y);
                TreeItem item = tree.getItem(point);

                if (item != null) {
                    int columnCount = tree.getColumnCount();
                    for (int i = 0; i < columnCount; i++) {
                        Rectangle bounds = item.getBounds(i);
                        if (bounds.contains(point)) {
                            // 마우스가 위치한 컬럼 인덱스와 행 정보 출력
                            System.out.println("Mouse over column index: " + i + ", Row: " + item.getText(0));
                            break; // 컬럼을 찾았으므로 반복 종료
                        }
                    }
                }
            }
        });

        shell.setSize(400, 300);
        shell.open();

        // 이벤트 루프
        while (!shell.isDisposed()) {
            if (!display.readAndDispatch()) {
                display.sleep();
            }
        }
        display.dispose();
    }
}
