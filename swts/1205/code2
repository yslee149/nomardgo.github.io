package hello.world;
import java.util.*;
import java.util.regex.*;

public class SequentialPatternChecker {
    public static void main(String[] args) {
        List<String> folders = Arrays.asList("hello-1", "folder.1", "folder.2", "folder.3", "folder.5", "other.1", "abcd", "Aiuto");
        Map<String, List<String>> result = classifyFolders(folders);

        System.out.println("순차적인 폴더: " + result.get("sequential"));
        System.out.println("비순차적인 폴더: " + result.get("nonSequential"));
    }

    /**
     * 문자열 리스트를 순차적인 폴더와 비순차적인 폴더로 분류하는 함수
     * 
     * @param strings 확인할 문자열 리스트
     * @return 순차적인 폴더: "sequential", 비순차적인 폴더: "nonSequential" 키를 가지는 맵
     */
    public static Map<String, List<String>> classifyFolders(List<String> strings) {
        Map<String, List<String>> result = new HashMap<>();
        result.put("sequential", new ArrayList<>());
        result.put("nonSequential", new ArrayList<>());

        if (strings == null || strings.isEmpty()) {
            return result;
        }

        String patternStr = "^(.*)\\.(\\d+)$";
        Pattern pattern = Pattern.compile(patternStr);

        // 패턴 매칭되는 폴더 그룹화
        Map<String, List<String>> matchedGroups = new HashMap<>();

        // 패턴 매칭 및 분류
        for (String s : strings) {
            Matcher matcher = pattern.matcher(s);
            if (matcher.matches()) {
                String prefix = matcher.group(1);
                matchedGroups.computeIfAbsent(prefix, k -> new ArrayList<>()).add(s);
            } else {
                // 패턴에 맞지 않으면 비순차적으로 분류
                result.get("nonSequential").add(s);
            }
        }

        // 패턴 매칭된 그룹은 모두 순차적이라고 간주
        for (List<String> group : matchedGroups.values()) {
            result.get("sequential").addAll(group);
        }

        return result;
    }
}

//

import java.util.*;
import java.util.regex.*;

public class SequentialPatternChecker {

    private final String patternStr = "^(.*)\\.(\\d+)$";
    private final Pattern pattern = Pattern.compile(patternStr);

    /**
     * 폴더 리스트를 순차적/비순차적으로 그룹화
     *
     * @param folders 폴더 이름 리스트
     * @return Map<FolderSequenceType, List<FolderInfo>> 그룹화된 결과
     */
    public Map<FolderSequenceType, List<FolderInfo>> classifyFolders(List<String> folders) {
        Map<FolderSequenceType, List<FolderInfo>> result = new EnumMap<>(FolderSequenceType.class);
        result.put(FolderSequenceType.SEQUENTIAL, new ArrayList<>());
        result.put(FolderSequenceType.NON_SEQUENTIAL, new ArrayList<>());

        if (folders == null || folders.isEmpty()) {
            return result;
        }

        // 접두사별로 그룹화
        Map<String, List<FolderInfo>> groupedFolders = new HashMap<>();

        for (String folder : folders) {
            Matcher matcher = pattern.matcher(folder);
            if (matcher.matches()) {
                String prefix = matcher.group(1);
                int number = Integer.parseInt(matcher.group(2));
                groupedFolders
                    .computeIfAbsent(prefix, k -> new ArrayList<>())
                    .add(new FolderInfo(folder, prefix, number));
            } else {
                // 패턴 불일치 항목은 비순차적으로 바로 추가
                result.get(FolderSequenceType.NON_SEQUENTIAL).add(new FolderInfo(folder, "", -1));
            }
        }

        // 각 그룹의 순차성 판단
        for (Map.Entry<String, List<FolderInfo>> entry : groupedFolders.entrySet()) {
            List<FolderInfo> folderList = entry.getValue();

            // 번호만 추출해서 정렬
            List<Integer> numbers = new ArrayList<>();
            for (FolderInfo folder : folderList) {
                numbers.add(folder.getNumber());
            }
            Collections.sort(numbers);

            // 순차성 검사
            boolean isSequential = true;
            for (int i = 0; i < numbers.size() - 1; i++) {
                if (numbers.get(i) + 1 != numbers.get(i + 1)) {
                    isSequential = false;
                    break;
                }
            }

            // 결과에 추가
            if (isSequential) {
                result.get(FolderSequenceType.SEQUENTIAL).addAll(folderList);
            } else {
                result.get(FolderSequenceType.NON_SEQUENTIAL).addAll(folderList);
            }
        }

        return result;
    }
}

====


public Map<FolderSequenceType, List<FolderInfo>> classifyFolders(List<FolderInfo> folders) {
    Map<FolderSequenceType, List<FolderInfo>> result = new EnumMap<>(FolderSequenceType.class);
    result.put(FolderSequenceType.SEQUENTIAL, new ArrayList<>());
    result.put(FolderSequenceType.NON_SEQUENTIAL, new ArrayList<>());

    if (folders == null || folders.isEmpty()) {
        return result; // 빈 입력 처리
    }

    // 접두사별로 그룹화
    Map<String, List<FolderInfo>> groupedFolders = new HashMap<>();

    for (FolderInfo folder : folders) {
        String prefix = folder.getPrefix();
        if (prefix == null || prefix.isEmpty()) {
            // 접두사가 없는 경우 비순차적으로 처리
            result.get(FolderSequenceType.NON_SEQUENTIAL).add(folder);
        } else {
            // 접두사를 기준으로 그룹화
            groupedFolders.computeIfAbsent(prefix, k -> new ArrayList<>()).add(folder);
        }
    }

    // 그룹별로 순차성 검사
    for (Map.Entry<String, List<FolderInfo>> entry : groupedFolders.entrySet()) {
        List<FolderInfo> folderList = entry.getValue();

        // 번호만 추출해서 정렬
        List<Integer> numbers = new ArrayList<>();
        for (FolderInfo folder : folderList) {
            numbers.add(folder.getNumber());
        }
        Collections.sort(numbers);

        // 순차성 판단
        boolean isSequential = true;
        for (int i = 0; i < numbers.size() - 1; i++) {
            if (numbers.get(i) + 1 != numbers.get(i + 1)) {
                isSequential = false;
                break;
            }
        }

        // 결과에 추가
        if (isSequential) {
            result.get(FolderSequenceType.SEQUENTIAL).addAll(folderList);
        } else {
            result.get(FolderSequenceType.NON_SEQUENTIAL).addAll(folderList);
        }
    }

    return result;
}


========================================== 


import java.util.*;
import java.util.regex.*;

public class SequentialPatternChecker {

    private final String patternStr = "^(.*)\\.(\\d+)$";
    private final Pattern pattern = Pattern.compile(patternStr);

    public Map<FolderSequenceType, List<FolderInfo>> classifyFolders(List<FolderInfo> folders) {
        Map<FolderSequenceType, List<FolderInfo>> result = new EnumMap<>(FolderSequenceType.class);
        result.put(FolderSequenceType.SEQUENTIAL, new ArrayList<>());
        result.put(FolderSequenceType.NON_SEQUENTIAL, new ArrayList<>());

        if (folders == null || folders.isEmpty()) {
            return result;
        }

        // 접두사별로 그룹화
        Map<String, List<FolderInfo>> groupedFolders = new HashMap<>();
        Map<String, List<Integer>> groupedNumbers = new HashMap<>();

        for (FolderInfo folder : folders) {
            String name = folder.getName();
            Matcher matcher = pattern.matcher(name);
            if (matcher.matches()) {
                String prefix = matcher.group(1); // 접두사
                int number = Integer.parseInt(matcher.group(2)); // 숫자

                groupedFolders.computeIfAbsent(prefix, k -> new ArrayList<>()).add(folder);
                groupedNumbers.computeIfAbsent(prefix, k -> new ArrayList<>()).add(number);
            } else {
                // 패턴에 맞지 않으면 비순차적으로 처리
                result.get(FolderSequenceType.NON_SEQUENTIAL).add(folder);
            }
        }

        // 각 그룹의 순차성 판단
        for (String prefix : groupedFolders.keySet()) {
            List<Integer> numbers = groupedNumbers.get(prefix);
            List<FolderInfo> folderList = groupedFolders.get(prefix);

            Collections.sort(numbers);

            // 순차성 검사
            boolean isSequential = true;
            for (int i = 0; i < numbers.size() - 1; i++) {
                if (numbers.get(i) + 1 != numbers.get(i + 1)) {
                    isSequential = false;
                    break;
                }
            }

            // 결과에 추가
            if (isSequential) {
                result.get(FolderSequenceType.SEQUENTIAL).addAll(folderList);
            } else {
                result.get(FolderSequenceType.NON_SEQUENTIAL).addAll(folderList);
            }
        }

        return result;
    }
}
