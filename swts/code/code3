import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

// Command interface
interface Command {
    void execute();
    void undo();
}

// Concrete command for putting a value in the map
class PutCommand implements Command {
    private final Map<String, String> map;
    private final String key;
    private final String value;
    private String previousValue;

    public PutCommand(Map<String, String> map, String key, String value) {
        this.map = map;
        this.key = key;
        this.value = value;
    }

    @Override
    public void execute() {
        previousValue = map.put(key, value);
    }

    @Override
    public void undo() {
        if (previousValue == null) {
            map.remove(key);
        } else {
            map.put(key, previousValue);
        }
    }
}

// Command manager to handle undo and redo
class CommandManager {
    private final Stack<Command> undoStack = new Stack<>();
    private final Stack<Command> redoStack = new Stack<>();

    public void executeCommand(Command command) {
        command.execute();
        undoStack.push(command);
        redoStack.clear();
    }

    public void undo() {
        if (!undoStack.isEmpty()) {
            Command command = undoStack.pop();
            command.undo();
            redoStack.push(command);
        } else {
            System.out.println("Nothing to undo");
        }
    }

    public void redo() {
        if (!redoStack.isEmpty()) {
            Command command = redoStack.pop();
            command.execute();
            undoStack.push(command);
        } else {
            System.out.println("Nothing to redo");
        }
    }
}

public class MapUndoRedoExample {
    public static void main(String[] args) {
        Map<String, String> map = new HashMap<>();
        CommandManager commandManager = new CommandManager();

        // Put "key1" -> "value1"
        Command putCommand1 = new PutCommand(map, "key1", "value1");
        commandManager.executeCommand(putCommand1);
        System.out.println("After put key1: " + map);

        // Put "key2" -> "value2"
        Command putCommand2 = new PutCommand(map, "key2", "value2");
        commandManager.executeCommand(putCommand2);
        System.out.println("After put key2: " + map);

        // Undo last action
        commandManager.undo();
        System.out.println("After undo: " + map);

        // Redo last action
        commandManager.redo();
        System.out.println("After redo: " + map);
    }
}

------------

package org.yslee;

import java.util.LinkedHashMap;
import java.util.Map;

public class MapMergeWithFlag {
    public static void main(String[] args) {
        // 첫 번째와 두 번째 맵 정의
        Map<String, Integer> map1 = new LinkedHashMap<>();
        map1.put("A", 1);
        map1.put("B", 2);
        map1.put("C", 3);
        map1.put("e", 6);
        map1.put("f", 9);

        Map<String, Integer> map2 = new LinkedHashMap<>();
        map2.put("A", 1);
        map2.put("B", 4); // 값이 다름
        map2.put("D", 5);
        map1.put("e", 6);

        // 결과를 저장할 맵
        Map<String, String> resultMap = new LinkedHashMap<>();

        // 첫 번째 맵을 순회하면서 상태 확인
        for (String key : map1.keySet()) {
            if (map2.containsKey(key)) {
                // 두 번째 맵에도 키가 존재하는 경우
                if (map1.get(key).equals(map2.get(key))) {
                    resultMap.put(key, "same"); // 값이 동일
                } else {
                    resultMap.put(key, "different"); // 값이 다름
                }
            } else {
                resultMap.put(key, "delete"); // 첫 번째 맵에만 존재
            }
        }

        // 두 번째 맵을 순회하면서 첫 번째 맵에 없는 키 확인
        for (String key : map2.keySet()) {
            if (!map1.containsKey(key)) {
                resultMap.put(key, "added"); // 두 번째 맵에만 존재
            }
        }

        // 결과 출력
        for (Map.Entry<String, String> entry : resultMap.entrySet()) {
            System.out.println("키 = " + entry.getKey() + ", 상태 = " + entry.getValue());
        }
    }
}
