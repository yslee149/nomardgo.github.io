import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

// Command interface
interface Command {
    void execute();
    void undo();
}

// Concrete command for putting a value in the map
class PutCommand implements Command {
    private final Map<String, String> map;
    private final String key;
    private final String value;
    private String previousValue;

    public PutCommand(Map<String, String> map, String key, String value) {
        this.map = map;
        this.key = key;
        this.value = value;
    }

    @Override
    public void execute() {
        previousValue = map.put(key, value);
    }

    @Override
    public void undo() {
        if (previousValue == null) {
            map.remove(key);
        } else {
            map.put(key, previousValue);
        }
    }
}

// Command manager to handle undo and redo
class CommandManager {
    private final Stack<Command> undoStack = new Stack<>();
    private final Stack<Command> redoStack = new Stack<>();

    public void executeCommand(Command command) {
        command.execute();
        undoStack.push(command);
        redoStack.clear();
    }

    public void undo() {
        if (!undoStack.isEmpty()) {
            Command command = undoStack.pop();
            command.undo();
            redoStack.push(command);
        } else {
            System.out.println("Nothing to undo");
        }
    }

    public void redo() {
        if (!redoStack.isEmpty()) {
            Command command = redoStack.pop();
            command.execute();
            undoStack.push(command);
        } else {
            System.out.println("Nothing to redo");
        }
    }
}

public class MapUndoRedoExample {
    public static void main(String[] args) {
        Map<String, String> map = new HashMap<>();
        CommandManager commandManager = new CommandManager();

        // Put "key1" -> "value1"
        Command putCommand1 = new PutCommand(map, "key1", "value1");
        commandManager.executeCommand(putCommand1);
        System.out.println("After put key1: " + map);

        // Put "key2" -> "value2"
        Command putCommand2 = new PutCommand(map, "key2", "value2");
        commandManager.executeCommand(putCommand2);
        System.out.println("After put key2: " + map);

        // Undo last action
        commandManager.undo();
        System.out.println("After undo: " + map);

        // Redo last action
        commandManager.redo();
        System.out.println("After redo: " + map);
    }
}