treeViewer.addSelectionChangedListener(event -> {
    IStructuredSelection selection = treeViewer.getStructuredSelection();
    if (!selection.isEmpty()) {
        Object selectedElement = selection.getFirstElement();

        // 선택된 노드만 펼치기
        treeViewer.setExpandedState(selectedElement, true);

        // 하위 노드만 펼치기
        expandChildren(treeViewer, selectedElement);
    }
});

private void expandChildren(TreeViewer viewer, Object parent) {
    ITreeContentProvider provider = (ITreeContentProvider) viewer.getContentProvider();
    Object[] children = provider.getChildren(parent);
    if (children != null) {
        for (Object child : children) {
            viewer.setExpandedState(child, true);
            expandChildren(viewer, child); // 재귀적으로 하위 노드 확장
        }
    }
}


--------


treeViewer.addSelectionChangedListener(event -> {
    IStructuredSelection selection = treeViewer.getStructuredSelection();
    if (!selection.isEmpty()) {
        Object selectedElement = selection.getFirstElement();

        // 선택된 노드를 먼저 펼침
        treeViewer.setExpandedState(selectedElement, true);

        // 선택된 노드의 하위 노드를 Lazy 방식으로 펼침
        expandChildrenLazy(treeViewer, selectedElement);
    }
});

private void expandChildrenLazy(TreeViewer viewer, Object parent) {
    // 컨텐츠 프로바이더 가져오기
    ILazyTreeContentProvider provider = (ILazyTreeContentProvider) viewer.getContentProvider();

    // 하위 노드 개수 가져오기
    int childCount = viewer.getTree().getItemCount(); // 또는 다른 방식으로 자식 개수 계산
    for (int i = 0; i < childCount; i++) {
        provider.updateElement(parent, i); // Lazy 로드 호출
        Object child = viewer.getTree().getItem(i).getData(); // 로드된 데이터 가져오기
        if (child != null) {
            viewer.setExpandedState(child, true); // 하위 노드 확장
            expandChildrenLazy(viewer, child); // 재귀적으로 하위 노드 처리
        }
    }
}


---


private void expandChildrenLazy(TreeViewer viewer, Object parent) {
    ILazyTreeContentProvider provider = (ILazyTreeContentProvider) viewer.getContentProvider();

    int childCount = getChildCount(parent); // 자식 개수 가져오기
    for (int i = 0; i < childCount; i++) {
        provider.updateElement(parent, i); // Lazy 로드
        Object child = viewer.getTree().getItem(i).getData();
        if (child != null) {
            viewer.setExpandedState(child, true);
        }
    }
}

private int getChildCount(Object parent) {
    // 부모의 자식 개수를 정확히 반환하도록 구현
    return yourDataModel.getChildCount(parent);
}


--

treeViewer.addSelectionChangedListener(event -> {
    IStructuredSelection selection = treeViewer.getStructuredSelection();
    if (!selection.isEmpty()) {
        Object selectedElement = selection.getFirstElement();

        // 선택된 노드와 하위 노드를 모두 펼치기
        expandSubTree(treeViewer, selectedElement);
    }
});

private void expandSubTree(TreeViewer viewer, Object node) {
    // 선택한 노드 확장
    viewer.setExpandedState(node, true);

    // Lazy Loading에서 자식 개수 설정
    ILazyTreeContentProvider provider = (ILazyTreeContentProvider) viewer.getContentProvider();
    provider.updateChildCount(node, -1); // -1은 자식 개수 자동 계산
    int childCount = viewer.getTree().getItemCount(); // 실제 자식 개수 가져오기

    // 자식 노드 순회
    for (int i = 0; i < childCount; i++) {
        viewer.getTree().getItem(i).setExpanded(true); // 자식도 펼치기
    }
}


--

treeViewer.expandToLevel(selectedElement, TreeViewer.ALL_LEVELS);
