package com.tree;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.TreeEditor;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.TreeEvent;
import org.eclipse.swt.events.TreeListener;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;
import java.util.*;

public class TreeViewerWithButtons {

    private TreeViewer treeViewer;
    private Map<TreeItem, TreeEditor> editorMap = new HashMap<>();

    public static void main(String[] args) {
        new TreeViewerWithButtons().open();
    }

    public void open() {
        Display display = new Display();
        Shell shell = new Shell(display);
        shell.setText("TreeViewer with Buttons");
        shell.setLayout(new FillLayout());

        treeViewer = new TreeViewer(shell, SWT.BORDER | SWT.FULL_SELECTION);
        treeViewer.getTree().setHeaderVisible(true);
        treeViewer.getTree().setLinesVisible(true);

        // 컬럼 생성
        TreeViewerColumn column1 = new TreeViewerColumn(treeViewer, SWT.NONE);
        column1.getColumn().setText("Name");
        column1.getColumn().setWidth(200);
        column1.setLabelProvider(new ColumnLabelProvider() {
            @Override
            public String getText(Object element) {
                return ((MyTreeNode) element).name;
            }
        });

        TreeViewerColumn column2 = new TreeViewerColumn(treeViewer, SWT.NONE);
        column2.getColumn().setText("Action");
        column2.getColumn().setWidth(100);
        column2.setLabelProvider(new ColumnLabelProvider()); // 비워둠

        // 콘텐츠 설정
        treeViewer.setContentProvider(new MyContentProvider());
        treeViewer.setInput(getSampleData());

        // 초기 버튼 생성
        createButtonsRecursively(treeViewer.getTree().getItems());

        // 트리 확장/축소 리스너 추가
        treeViewer.getTree().addTreeListener(new TreeListener() {
            @Override
            public void treeCollapsed(TreeEvent e) {
                TreeItem item = (TreeItem) e.item;
                disposeEditor(item);
            }

            @Override
            public void treeExpanded(TreeEvent e) {
                TreeItem item = (TreeItem) e.item;
                createButtonsRecursively(item.getItems());
            }
        });

        // 트리 새로고침 시 버튼 재생성
        treeViewer.getTree().addListener(SWT.Expand, event -> {
            // 필요 시 추가 작업
        });

        // 리프레시를 수동으로 처리할 경우, 예를 들어 버튼을 재설정해야 할 때 호출
        // 예시: treeViewer.refresh();
        // 이후에 필요한 경우 disposeAllEditors() 및 createButtonsRecursively() 호출

        shell.setSize(400, 300);
        shell.open();

        // 이벤트 루프
        while (!shell.isDisposed()) {
            if (!display.readAndDispatch())
                display.sleep();
        }
        display.dispose();
    }

    private void createButtonsRecursively(TreeItem[] items) {
        for (TreeItem item : items) {
            Object element = item.getData();
            if (element instanceof MyTreeNode) {
                MyTreeNode node = (MyTreeNode) element;
                createButton(item, node);
                // 재귀적으로 자식 항목에 대해서도 버튼 생성
                if (item.getExpanded() && item.getItems().length > 0) {
                    createButtonsRecursively(item.getItems());
                }
            }
        }
    }

    private void createButton(TreeItem item, MyTreeNode node) {
        // 기존 TreeEditor가 있다면 제거
        if (editorMap.containsKey(item)) {
            TreeEditor existingEditor = editorMap.get(item);
            if (existingEditor.getEditor() != null && !existingEditor.getEditor().isDisposed()) {
                existingEditor.getEditor().dispose();
            }
            existingEditor.dispose();
            editorMap.remove(item);
        }

        // 버튼 생성
        Button button = new Button(treeViewer.getTree(), SWT.PUSH);
        button.setText("Click");
        button.pack();

        // TreeEditor 설정
        TreeEditor editor = new TreeEditor(treeViewer.getTree());
        editor.horizontalAlignment = SWT.CENTER;
        editor.verticalAlignment = SWT.CENTER;
        editor.grabHorizontal = true;
        editor.grabVertical = true;
        editor.setEditor(button, item, 1); // 두 번째 컬럼에 배치

        // 버튼 이벤트 처리
        button.addListener(SWT.Selection, e -> {
            MessageBox messageBox = new MessageBox(treeViewer.getTree().getShell(), SWT.ICON_INFORMATION);
            messageBox.setMessage("Button clicked on: " + node.name);
            messageBox.open();
        });

        // 리소스 정리
        button.addDisposeListener(new DisposeListener() {
            @Override
            public void widgetDisposed(DisposeEvent e) {
                editor.dispose();
                editorMap.remove(item);
            }
        });

        // Map에 추가
        editorMap.put(item, editor);
    }

    private void disposeAllEditors() {
        for (Map.Entry<TreeItem, TreeEditor> entry : editorMap.entrySet()) {
            TreeEditor editor = entry.getValue();
            if (editor.getEditor() != null && !editor.getEditor().isDisposed()) {
                editor.getEditor().dispose();
            }
            editor.dispose();
        }
        editorMap.clear();
    }

    private void disposeEditor(TreeItem item) {
        TreeEditor editor = editorMap.get(item);
        if (editor != null) {
            if (editor.getEditor() != null && !editor.getEditor().isDisposed()) {
                editor.getEditor().dispose();
            }
            editor.dispose();
            editorMap.remove(item);
        }

        // 자식 항목의 에디터도 재귀적으로 제거
        for (TreeItem child : item.getItems()) {
            disposeEditor(child);
        }
    }

    private MyTreeNode[] getSampleData() {
        return new MyTreeNode[] {
            new MyTreeNode("Parent 1", new MyTreeNode[] {
                new MyTreeNode("Child 1.1"),
                new MyTreeNode("Child 1.2")
            }),
            new MyTreeNode("Parent 2", new MyTreeNode[] {
                new MyTreeNode("Child 2.1"),
                new MyTreeNode("Child 2.2")
            })
        };
    }

    // 콘텐츠 프로바이더
    class MyContentProvider implements ITreeContentProvider {
        @Override
        public Object[] getElements(Object inputElement) {
            return (MyTreeNode[]) inputElement;
        }

        @Override
        public Object[] getChildren(Object parentElement) {
            return ((MyTreeNode) parentElement).children;
        }

        @Override
        public Object getParent(Object element) {
            return ((MyTreeNode) element).parent;
        }

        @Override
        public boolean hasChildren(Object element) {
            return ((MyTreeNode) element).children != null && ((MyTreeNode) element).children.length > 0;
        }
    }

    // 노드 클래스
    class MyTreeNode {
        String name;
        MyTreeNode[] children;
        MyTreeNode parent;

        MyTreeNode(String name) {
            this.name = name;
        }

        MyTreeNode(String name, MyTreeNode[] children) {
            this.name = name;
            this.children = children;
            for (MyTreeNode child : children) {
                child.parent = this;
            }
        }
    }
}


--

▶
▼
▷
▽

↢
↣