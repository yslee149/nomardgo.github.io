public EReference findContainerReference(EObject eObject) {
    // 상위 객체 (container)를 가져옴
    EObject container = eObject.eContainer();
    
    // container가 없으면 null 반환
    if (container == null) {
        return null;
    }

    // 상위 객체의 모든 EReference를 확인하여, 해당 eObject를 담고 있는 containment reference를 찾음
    for (EReference reference : container.eClass().getEAllReferences()) {
        // containment reference인지 확인
        if (reference.isContainment()) {
            Object value = container.eGet(reference);
            
            // reference가 리스트(EList)인 경우 (1대N 관계)
            if (value instanceof EList<?>) {
                EList<?> list = (EList<?>) value;
                if (list.contains(eObject)) {
                    return reference;  // eObject가 리스트에 포함되어 있으면 이 reference가 container 역할을 함
                }
            } 
            // reference가 단일 객체인 경우 (1대1 관계)
            else if (value == eObject) {
                return reference;  // eObject가 직접 담긴 reference가 container 역할을 함
            }
        }
    }
    
    // container reference를 찾지 못하면 null 반환
    return null;
}



import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;

public void addToEObjectContainmentEList(EObject containerObject, EObject newEObject, String featureName) {
    // featureName 속성을 가져옴
    EStructuralFeature feature = containerObject.eClass().getEStructuralFeature(featureName);

    if (feature == null) {
        System.out.println("속성 '" + featureName + "'을(를) 찾을 수 없습니다.");
        return;
    }

    // 속성 값 가져오기
    Object value = containerObject.eGet(feature);

    // 속성이 EList(EObjectContainmentEList)인지 확인
    if (value instanceof EObjectContainmentEList<?>) {
        // EList에 새 EObject 추가
        EObjectContainmentEList<EObject> containmentList = (EObjectContainmentEList<EObject>) value;
        containmentList.add(newEObject);
        System.out.println("새로운 객체가 EObjectContainmentEList에 추가되었습니다.");
    } else if (value instanceof EList<?>) {
        // 일반 EList일 경우에도 추가 가능
        EList<EObject> list = (EList<EObject>) value;
        list.add(newEObject);
        System.out.println("새로운 객체가 일반 EList에 추가되었습니다.");
    } else {
        System.out.println("해당 속성은 EList가 아닙니다.");
    }
}

---------------------------------------

EMF Compare를 사용하면 두 Ecore 모델 간의 차이점을 비교하고, 차이점에 따라 자동으로 병합 작업을 수행할 수 있습니다. EMF Compare는 두 모델을 비교하여 차이점(Diff)을 제공하며, 그런 차이점들을 바탕으로 병합 작업을 할 수 있습니다.

EMF Compare를 사용하여 두 EObject 간의 차이를 비교하고, 그 차이를 바탕으로 자동으로 병합(즉, 오른쪽 모델에서 왼쪽 모델로 자동 추가)하는 방법은 다음과 같습니다.

EMF Compare를 이용한 자동 병합 절차
모델 간 비교: 두 개의 EObject를 비교하여 차이점을 도출합니다.
차이점 기반 병합: 차이점 중에서 containment reference를 통해 자동으로 병합할 부분을 찾아 병합합니다.
EMF Compare 설정 및 병합 코드
1. 비교 설정 및 차이점 도출
먼저 두 EObject를 비교하고, 차이점을 도출하는 코드를 작성합니다.

java
코드 복사
import org.eclipse.emf.compare.Comparison;
import org.eclipse.emf.compare.EMFCompare;
import org.eclipse.emf.compare.diff.metamodel.Diff;
import org.eclipse.emf.compare.scope.IComparisonScope;
import org.eclipse.emf.compare.scope.DefaultComparisonScope;
import org.eclipse.emf.ecore.EObject;

public Comparison compareEObjects(EObject leftEObject, EObject rightEObject) {
    // EMF Compare를 위한 비교 스코프 설정 (왼쪽, 오른쪽, 기준 없음)
    IComparisonScope scope = new DefaultComparisonScope(leftEObject, rightEObject, null);
    
    // EMF Compare를 사용해 비교 작업 수행
    EMFCompare compare = EMFCompare.builder().build();
    Comparison comparison = compare.compare(scope);

    return comparison;
}
2. 차이점 기반 병합
도출된 차이점들을 이용하여, containment reference의 차이만 골라서 왼쪽 모델에 병합하는 코드를 작성합니다.

java
코드 복사
import org.eclipse.emf.common.util.Monitor;
import org.eclipse.emf.compare.Comparison;
import org.eclipse.emf.compare.merge.BatchMerger;
import org.eclipse.emf.compare.merge.IMerger;
import org.eclipse.emf.compare.merge.IMerger.RegistryImpl;
import org.eclipse.emf.compare.diff.metamodel.Diff;

public void mergeDifferences(Comparison comparison) {
    // EMF Compare 기본 머저(merger)를 생성
    IMerger.Registry mergerRegistry = new RegistryImpl();
    BatchMerger merger = new BatchMerger(mergerRegistry);

    // 차이점 중 왼쪽으로 병합해야 하는 부분을 병합
    merger.copyAllRightToLeft(comparison.getDifferences(), Monitor.NULL);
}
3. 통합된 자동 비교 및 병합 함수
이제 위의 비교 및 병합을 하나의 함수로 통합하여, 두 EObject를 비교하고 차이점을 자동으로 병합하는 전체 로직을 작성합니다.

java
코드 복사
import org.eclipse.emf.compare.Comparison;
import org.eclipse.emf.ecore.EObject;

public void autoMergeUsingEMFCompare(EObject leftEObject, EObject rightEObject) {
    // 1. 두 EObjects 간 비교 작업 수행
    Comparison comparison = compareEObjects(leftEObject, rightEObject);
    
    // 2. 차이점을 기반으로 왼쪽으로 자동 병합 수행
    mergeDifferences(comparison);
}
사용 예시
java
코드 복사
EObject leftModel = ...;  // 왼쪽 모델 (예: 기존 모델)
EObject rightModel = ...; // 오른쪽 모델 (예: 변경된 모델)

// EMF Compare를 사용해 오른쪽 모델에서 왼쪽 모델로 차이점 병합
autoMergeUsingEMFCompare(leftModel, rightModel);
동작 방식
EMF Compare 비교: 두 EObject를 비교하여 차이점을 도출합니다.
차이점 병합: BatchMerger를 사용하여 오른쪽에서 왼쪽으로 모든 차이점을 병합합니다. 이는 모델 간 차이점이 containment reference에 해당하는 경우 자동으로 하위 객체가 추가됩니다.
자동 병합: 특정 속성이나 feature를 하드코딩하지 않아도, EMF Compare가 두 모델 간의 모든 차이점을 분석하여 필요한 부분을 병합해 줍니다.
추가 고려 사항
세부 차이점 필터링: 차이점을 선택적으로 병합하고 싶다면, comparison.getDifferences()를 순회하면서 특정 Diff만 골라 병합할 수 있습니다.
트랜잭션 관리: TransactionalEditingDomain을 사용해 병합 시 트랜잭션을 적용할 수 있습니다.
EMF Compare를 통해 두 Ecore 모델 간의 차이를 쉽게 분석하고, 원하는 방식으로 자동 병합하는 작업을 수행할 수 있습니다.

------------------------------------

EMF Compare를 사용하여 두 EObject 간의 차이점(Diff)을 도출한 후, 세부적으로 차이점만 선택적으로 병합하려면, 도출된 Diff 객체를 분석한 후 필터링하는 작업이 필요합니다. EMF Compare는 여러 유형의 차이점(Diff)을 제공하며, 이를 통해 특정 속성에 대한 차이점만 병합할 수 있습니다.

세부 차이점 필터링 방법
EMF Compare가 도출하는 차이점(Diff)은 여러 가지 형태가 있습니다. 여기에는 속성 값의 차이(AttributeChange), 참조 변경(ReferenceChange), 객체의 추가/삭제(AddElement, RemoveElement) 등이 포함됩니다.

1. 차이점(Diff)의 유형 이해
AttributeChange: 속성(예: 문자열 값)의 변경.
ReferenceChange: 참조 객체의 변경 또는 추가/삭제.
AddElement, RemoveElement: 모델에 객체가 추가되거나 삭제된 경우.
ContainmentChange: containment reference 내 객체가 추가 또는 삭제된 경우.
이를 이용해 원하는 차이점만 선택적으로 병합할 수 있습니다.

필터링 및 선택적 병합 코드
1. 필터링을 위한 병합 함수
java
코드 복사
import org.eclipse.emf.compare.Comparison;
import org.eclipse.emf.compare.Diff;
import org.eclipse.emf.compare.diff.metamodel.AttributeChange;
import org.eclipse.emf.compare.diff.metamodel.ReferenceChange;
import org.eclipse.emf.compare.merge.IMerger;
import org.eclipse.emf.compare.merge.BatchMerger;
import org.eclipse.emf.compare.merge.IMerger.RegistryImpl;
import org.eclipse.emf.common.util.Monitor;

public void mergeSelectedDifferences(Comparison comparison) {
    // EMF Compare 머저(merger)를 설정
    IMerger.Registry mergerRegistry = new RegistryImpl();
    BatchMerger merger = new BatchMerger(mergerRegistry);

    // 병합할 Diff 목록 생성
    List<Diff> diffsToMerge = new ArrayList<>();

    // 차이점을 하나씩 필터링
    for (Diff diff : comparison.getDifferences()) {
        // 속성 변경 사항에 대해서만 병합
        if (diff instanceof AttributeChange) {
            AttributeChange attributeChange = (AttributeChange) diff;

            // 특정 속성의 변경 사항만 병합
            if ("specificAttribute".equals(attributeChange.getAttribute().getName())) {
                diffsToMerge.add(diff);
            }
        }

        // 참조 변경 사항에 대해서만 병합
        if (diff instanceof ReferenceChange) {
            ReferenceChange referenceChange = (ReferenceChange) diff;

            // 특정 참조에 대한 변경 사항만 병합
            if ("specificReference".equals(referenceChange.getReference().getName())) {
                diffsToMerge.add(diff);
            }
        }
    }

    // 선택된 Diff들만 병합 (오른쪽에서 왼쪽으로)
    merger.copyAllRightToLeft(diffsToMerge, Monitor.NULL);
}
2. 세부 차이점 필터링 설명
comparison.getDifferences(): 비교 결과에서 모든 차이점(Diff)을 가져옵니다.
AttributeChange 필터링: 속성 값의 차이를 나타내는 AttributeChange를 필터링하여, 특정 속성(예: specificAttribute)에 대한 변경 사항만 병합합니다.
ReferenceChange 필터링: 참조 객체의 변경 사항을 나타내는 ReferenceChange를 필터링하여, 특정 참조(예: specificReference)에 대한 변경만 병합합니다.
선택적 병합: 선택된 차이점(Diff)들만 병합 작업을 수행합니다.
3. 예시
java
코드 복사
EObject leftModel = ...;  // 왼쪽 모델
EObject rightModel = ...; // 오른쪽 모델

// 두 모델을 비교
Comparison comparison = compareEObjects(leftModel, rightModel);

// 특정 차이점만 병합
mergeSelectedDifferences(comparison);
4. 차이점 필터링 기준
필터링 기준은 다음과 같습니다:

특정 속성의 변경: 특정 속성(예: "specificAttribute")에 대해서만 병합할 수 있습니다.
특정 참조의 변경: 특정 참조(예: "specificReference")에 대해서만 병합할 수 있습니다.
객체 추가/삭제: 특정 객체가 추가되거나 삭제된 경우에만 병합할 수 있습니다.
Containment 차이: 특정 containment reference에 속한 객체의 변경 사항만 병합할 수 있습니다.
5. 병합 전략
EMF Compare는 다음과 같은 병합 전략을 제공합니다:

Right to Left: 오른쪽 모델에서 왼쪽 모델로 차이점 병합.
Left to Right: 왼쪽 모델에서 오른쪽 모델로 차이점 병합.
필터링된 차이점을 이용해 선택적으로 모델을 병합할 수 있으며, 속성, 참조, 객체 추가/삭제 등 세부적인 기준에 맞춰 유연하게 처리할 수 있습니다.


------------


import java.util.HashMap;
import java.util.Map;

public class PathIdGenerator {

    // 경로별 아이디와 부모아이디를 저장할 맵
    private static Map<String, Integer> idMap = new HashMap<>();
    private static Map<String, Integer> parentIdMap = new HashMap<>();
    private static int currentId = 0;

    public static void main(String[] args) {
        // 경로 리스트
        String[] paths = {
            "/data/ccc.txt", 
            "/data/data1/aaa.txt", 
            "/data/data1/bbb.txt", 
            "/data/data1/data2/bbb.txt", 
            "/data/data1/data2/ddd.txt"
        };

        for (String path : paths) {
            assignIdAndParentId(path);
        }

        // 결과 출력
        for (String path : paths) {
            System.out.println("Path: " + path + ", ID: " + idMap.get(path) + ", Parent ID: " + parentIdMap.get(path));
        }
    }

    // 아이디와 부모 아이디를 할당하는 메서드
    public static void assignIdAndParentId(String path) {
        // 이미 처리된 경로는 건너뜀
        if (!idMap.containsKey(path)) {
            // 슬래시(/)로 경로 분리
            String parentPath = getParentPath(path);

            // 부모 경로가 존재하는 경우 부모 경로부터 먼저 처리
            if (parentPath != null && !idMap.containsKey(parentPath)) {
                assignIdAndParentId(parentPath);
            }

            // 현재 경로에 대해 ID 및 Parent ID 설정
            idMap.put(path, currentId);
            if (parentPath != null) {
                parentIdMap.put(path, idMap.get(parentPath));
            } else {
                parentIdMap.put(path, -1);  // 최상위 경로는 parentId를 -1로 설정
            }
            currentId++;
        }
    }

    // 주어진 경로의 부모 경로를 문자열로 반환
    public static String getParentPath(String path) {
        int lastSlashIndex = path.lastIndexOf('/');

        // 루트 경로만 있는 경우 null 반환
        if (lastSlashIndex <= 0) {
            return null;
        }

        // 마지막 슬래시 앞의 경로 반환
        return path.substring(0, lastSlashIndex);
    }
}

-----------------------------------


import java.util.HashMap;
import java.util.Map;

public class PathIdGenerator {

    // 경로별 아이디와 부모아이디를 저장할 맵
    private static Map<String, Integer> idMap = new HashMap<>();
    private static Map<String, Integer> parentIdMap = new HashMap<>();
    private static Map<String, String> typeMap = new HashMap<>(); // 경로 타입 저장 (파일/폴더)
    private static int currentId = 0;

    public static void main(String[] args) {
        // 경로 리스트
        String[] paths = {
            "/data/ccc.txt", 
            "/data/data1/aaa.txt", 
            "/data/data1/bbb.txt", 
            "/data/data1/data2/bbb.txt", 
            "/data/data1/data2/ddd.txt", 
            "/data/data1",           // 폴더
            "/data/data1/data2"       // 폴더
        };

        for (String path : paths) {
            assignIdAndParentId(path);
        }

        // 결과 출력
        for (String path : paths) {
            System.out.println("Path: " + path 
                + ", ID: " + idMap.get(path) 
                + ", Parent ID: " + parentIdMap.get(path) 
                + ", Type: " + typeMap.get(path));
        }
    }

    // 아이디와 부모 아이디를 할당하는 메서드
    public static void assignIdAndParentId(String path) {
        // 이미 처리된 경로는 건너뜀
        if (!idMap.containsKey(path)) {
            // 슬래시(/)로 경로 분리
            String parentPath = getParentPath(path);

            // 부모 경로가 존재하는 경우 부모 경로부터 먼저 처리
            if (parentPath != null && !idMap.containsKey(parentPath)) {
                assignIdAndParentId(parentPath);
            }

            // 현재 경로에 대해 ID 및 Parent ID 설정
            idMap.put(path, currentId);
            if (parentPath != null) {
                parentIdMap.put(path, idMap.get(parentPath));
            } else {
                parentIdMap.put(path, -1);  // 최상위 경로는 parentId를 -1로 설정
            }

            // 경로 타입 설정 (파일 또는 폴더)
            typeMap.put(path, isFile(path) ? "File" : "Folder");

            currentId++;
        }
    }

    // 주어진 경로의 부모 경로를 문자열로 반환
    public static String getParentPath(String path) {
        int lastSlashIndex = path.lastIndexOf('/');

        // 루트 경로만 있는 경우 null 반환
        if (lastSlashIndex <= 0) {
            return null;
        }

        // 마지막 슬래시 앞의 경로 반환
        return path.substring(0, lastSlashIndex);
    }

    // 경로가 파일인지 폴더인지 구분하는 메서드
    public static boolean isFile(String path) {
        // 파일은 "."을 포함한 확장자가 있다고 가정
        return path.contains(".");
    }
}


다음과 같은 데이터가 있는데 
현재 depth 값이 모두 0 이야. 
이 데이터를 이용해서 depth 값을 계산해서 넣어주는 자바 함수를 작성해보세요.

[id=0 , parentId=-1, filePath1=  , depth = 0], 
[id=1 , parentId=-0, filePath1=Bswnd_E2EXf.arxml  , depth = 0], 
[id=2 , parentId=-0, filePath1=ECU ,  depth = 0], 
[id=3 , parentId=-2, filePath1=ECU/MCal , depth = 0], 
[id=4 , parentId=-3, filePath1=ECU/Mcal/Ecu_Can.arxml ,  depth = 0], 
[id=5 , parentId=-0, filePath1=ECU/ConfigruationParamater.arxml , depth = 0], 
[id=6 , parentId=-2, filePath1=ECU/Ecud_CanCM.arxml , depth = 0], 
[id=7 , parentId=-2, filePath1=ECU/ECUCD_EucVAlueCollection.arxml , depth = 0], 
[id=8 , parentId=-0, filePath1=Ecucd_arxml , depth = 0], 
[id=9 , parentId=-3, filePath1=ECU/Mcal/Ecud_Adc.arxml , depth = 0], 
[id=10 , parentId=3, filePath1=ECU/Mcal/Ecud_Abase.arxml , depth = 0], 
[id=11, parentId=-3, filePath1=ECU/Mcal/Ecud_Dec.arxml ,  depth = 0], 
[id=12 , parentId=-2, filePath1=ECU/Ecud_b2.arxml ,  , depth = 0]


import java.util.*;

public class DepthCalculator {

    static class Node {
        int id;
        int parentId;
        int depth;
        String filePath1;

        public Node(int id, int parentId, String filePath1) {
            this.id = id;
            this.parentId = parentId;
            this.filePath1 = filePath1;
            this.depth = -1; // 깊이 초기화
        }
    }

    public static void main(String[] args) {
        // 주어진 데이터를 노드로 생성
        List<Node> nodes = Arrays.asList(
                new Node(0, -1, ""),
                new Node(1, 0, "Bswnd_E2EXf.arxml"),
                new Node(2, 0, "ECU"),
                new Node(3, 2, "ECU/MCal"),
                new Node(4, 3, "ECU/Mcal/Ecu_Can.arxml"),
                new Node(5, 0, "ECU/ConfigruationParamater.arxml"),
                new Node(6, 2, "ECU/Ecud_CanCM.arxml"),
                new Node(7, 2, "ECU/ECUCD_EucVAlueCollection.arxml"),
                new Node(8, 0, "Ecucd_arxml"),
                new Node(9, 3, "ECU/Mcal/Ecud_Adc.arxml"),
                new Node(10, 3, "ECU/Mcal/Ecud_Abase.arxml"),
                new Node(11, 3, "ECU/Mcal/Ecud_Dec.arxml"),
                new Node(12, 2, "ECU/Ecud_b2.arxml")
        );

        // 노드 ID를 키로 하는 맵 생성
        Map<Integer, Node> nodeMap = new HashMap<>();
        for (Node node : nodes) {
            nodeMap.put(node.id, node);
        }

        // 각 노드의 깊이 계산
        for (Node node : nodes) {
            computeDepth(node, nodeMap, new HashSet<>());
        }

        // 결과 출력
        for (Node node : nodes) {
            System.out.println("ID: " + node.id + ", Depth: " + node.depth + ", FilePath: " + node.filePath1);
        }
    }

    private static int computeDepth(Node node, Map<Integer, Node> nodeMap, Set<Integer> visited) {
        if (node.depth != -1) {
            return node.depth;
        }
        if (node.parentId == -1) {
            node.depth = 0;
            return 0;
        }
        if (visited.contains(node.id)) {
            throw new IllegalArgumentException("순환 참조가 감지되었습니다: ID " + node.id);
        }
        visited.add(node.id);
        Node parent = nodeMap.get(node.parentId);
        if (parent == null) {
            node.depth = 0; // 부모가 없으면 루트로 간주
        } else {
            node.depth = computeDepth(parent, nodeMap, visited) + 1;
        }
        visited.remove(node.id);
        return node.depth;
    }
}


--------------

import java.util.*;

public class DepthCalculator {

    public static void main(String[] args) {
        // 주어진 데이터를 배열로 생성
        int[] ids = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        int[] parentIds = {-1, 0, 0, 2, 3, 0, 2, 2, 0, 3, 3, 3, 2};
        String[] filePaths = {
                "",
                "Bswnd_E2EXf.arxml",
                "ECU",
                "ECU/MCal",
                "ECU/Mcal/Ecu_Can.arxml",
                "ECU/ConfigruationParamater.arxml",
                "ECU/Ecud_CanCM.arxml",
                "ECU/ECUCD_EucVAlueCollection.arxml",
                "Ecucd_arxml",
                "ECU/Mcal/Ecud_Adc.arxml",
                "ECU/Mcal/Ecud_Abase.arxml",
                "ECU/Mcal/Ecud_Dec.arxml",
                "ECU/Ecud_b2.arxml"
        };

        // parentMap 생성: id를 키로 하고 parentId를 값으로 가진다
        Map<Integer, Integer> parentMap = new HashMap<>();
        for (int i = 0; i < ids.length; i++) {
            parentMap.put(ids[i], parentIds[i]);
        }

        // 깊이를 저장할 depthMap 생성
        Map<Integer, Integer> depthMap = new HashMap<>();

        // 각 노드의 깊이 계산
        for (int id : ids) {
            computeDepth(id, parentMap, depthMap, new HashSet<>());
        }

        // 결과 출력
        for (int i = 0; i < ids.length; i++) {
            int depth = depthMap.get(ids[i]);
            System.out.println("ID: " + ids[i] + ", Depth: " + depth + ", FilePath: " + filePaths[i]);
        }
    }

    private static int computeDepth(int id, Map<Integer, Integer> parentMap, Map<Integer, Integer> depthMap, Set<Integer> visited) {
        if (depthMap.containsKey(id)) {
            return depthMap.get(id);
        }
        if (visited.contains(id)) {
            throw new IllegalArgumentException("순환 참조가 감지되었습니다: ID " + id);
        }
        visited.add(id);
        Integer parentId = parentMap.get(id);
        int depth;
        if (parentId == null || parentId == -1) {
            depth = 0;
        } else {
            depth = computeDepth(parentId, parentMap, depthMap, visited) + 1;
        }
        depthMap.put(id, depth);
        visited.remove(id);
        return depth;
    }
}
